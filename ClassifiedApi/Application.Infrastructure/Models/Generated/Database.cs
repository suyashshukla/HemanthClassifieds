
// This file was automatically generated by the PetaPoco T4 Template
// Do not make changes directly to this file - edit the template instead
// 
// The following connection settings were used to generate this file
// 
//     Connection String Name: `AppConnection`
//     Provider:               `System.Data.SqlClient`
//     Connection String:      `Data Source=HEMANTH-PC\SQLH;Initial Catalog=Classified;Integrated Security=True`
//     Schema:                 ``
//     Include Views:          `True`

using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using PetaPoco;

namespace AppConnection
{
	public partial class AppConnectionDB : Database
	{
		public AppConnectionDB() 
			: base("AppConnection")
		{
			CommonConstruct();
		}

		public AppConnectionDB(string connectionStringName) 
			: base(connectionStringName)
		{
			CommonConstruct();
		}
		
		partial void CommonConstruct();
		
		public interface IFactory
		{
			AppConnectionDB GetInstance();
		}
		
		public static IFactory Factory { get; set; }
        public static AppConnectionDB GetInstance()
        {
			if (_instance!=null)
				return _instance;
				
			if (Factory!=null)
				return Factory.GetInstance();
			else
				return new AppConnectionDB();
        }

		[ThreadStatic] static AppConnectionDB _instance;
		
		public override void OnBeginTransaction()
		{
			if (_instance==null)
				_instance=this;
		}
		
		public override void OnEndTransaction()
		{
			if (_instance==this)
				_instance=null;
		}
        
		public class Record<T> where T:new()
		{
			public static AppConnectionDB repo { get { return AppConnectionDB.GetInstance(); } }
			public bool IsNew() { return repo.IsNew(this); }
			public object Insert() { return repo.Insert(this); }
			public void Save() { repo.Save(this); }
			public int Update() { return repo.Update(this); }
			public int Update(IEnumerable<string> columns) { return repo.Update(this, columns); }
			public static int Update(string sql, params object[] args) { return repo.Update<T>(sql, args); }
			public static int Update(Sql sql) { return repo.Update<T>(sql); }
			public int Delete() { return repo.Delete(this); }
			public static int Delete(string sql, params object[] args) { return repo.Delete<T>(sql, args); }
			public static int Delete(Sql sql) { return repo.Delete<T>(sql); }
			public static int Delete(object primaryKey) { return repo.Delete<T>(primaryKey); }
			public static bool Exists(object primaryKey) { return repo.Exists<T>(primaryKey); }
			public static bool Exists(string sql, params object[] args) { return repo.Exists<T>(sql, args); }
			public static T SingleOrDefault(object primaryKey) { return repo.SingleOrDefault<T>(primaryKey); }
			public static T SingleOrDefault(string sql, params object[] args) { return repo.SingleOrDefault<T>(sql, args); }
			public static T SingleOrDefault(Sql sql) { return repo.SingleOrDefault<T>(sql); }
			public static T FirstOrDefault(string sql, params object[] args) { return repo.FirstOrDefault<T>(sql, args); }
			public static T FirstOrDefault(Sql sql) { return repo.FirstOrDefault<T>(sql); }
			public static T Single(object primaryKey) { return repo.Single<T>(primaryKey); }
			public static T Single(string sql, params object[] args) { return repo.Single<T>(sql, args); }
			public static T Single(Sql sql) { return repo.Single<T>(sql); }
			public static T First(string sql, params object[] args) { return repo.First<T>(sql, args); }
			public static T First(Sql sql) { return repo.First<T>(sql); }
			public static List<T> Fetch(string sql, params object[] args) { return repo.Fetch<T>(sql, args); }
			public static List<T> Fetch(Sql sql) { return repo.Fetch<T>(sql); }
			public static List<T> Fetch(long page, long itemsPerPage, string sql, params object[] args) { return repo.Fetch<T>(page, itemsPerPage, sql, args); }
			public static List<T> Fetch(long page, long itemsPerPage, Sql sql) { return repo.Fetch<T>(page, itemsPerPage, sql); }
			public static List<T> SkipTake(long skip, long take, string sql, params object[] args) { return repo.SkipTake<T>(skip, take, sql, args); }
			public static List<T> SkipTake(long skip, long take, Sql sql) { return repo.SkipTake<T>(skip, take, sql); }
			public static Page<T> Page(long page, long itemsPerPage, string sql, params object[] args) { return repo.Page<T>(page, itemsPerPage, sql, args); }
			public static Page<T> Page(long page, long itemsPerPage, Sql sql) { return repo.Page<T>(page, itemsPerPage, sql); }
			public static IEnumerable<T> Query(string sql, params object[] args) { return repo.Query<T>(sql, args); }
			public static IEnumerable<T> Query(Sql sql) { return repo.Query<T>(sql); }
		}
	}
	

    
	[TableName("dbo.Ad")]
	[PrimaryKey("Id")]
	[ExplicitColumns]
    public partial class Ad : AppConnectionDB.Record<Ad>  
    {
		[Column] public int Id { get; set; }
		[Column] public int UserId { get; set; }
		[Column] public int CategoryId { get; set; }
		[Column] public int Type { get; set; }
		[Column] public int Status { get; set; }
		[Column] public DateTime PostedOn { get; set; }
		[Column] public bool ContactFlag { get; set; }
		[Column] public string Title { get; set; }
		[Column] public string Description { get; set; }
		[Column] public float Price { get; set; }
		[Column] public string ImageUrls { get; set; }
		[Column] public string FieldValues { get; set; }
		[Column] public DateTime ExpiryDate { get; set; }
		[Column] public int? OfferCount { get; set; }
		[Column] public int? CommentCount { get; set; }
		[Column] public string RemovedReason { get; set; }
		[Column] public int? RemovedBy { get; set; }
		[Column] public DateTime? RemovedOn { get; set; }
	}
    
	[TableName("dbo.Category")]
	[PrimaryKey("Id", AutoIncrement=false)]
	[ExplicitColumns]
    public partial class Category : AppConnectionDB.Record<Category>  
    {
		[Column] public int Id { get; set; }
		[Column] public string Name { get; set; }
		[Column] public string Icon { get; set; }
		[Column] public DateTime CreatedOn { get; set; }
		[Column] public string Description { get; set; }
		[Column] public int CreatedBy { get; set; }
		[Column] public string Fields { get; set; }
	}
    
	[TableName("dbo.Offer")]
	[PrimaryKey("Id")]
	[ExplicitColumns]
    public partial class Offer : AppConnectionDB.Record<Offer>  
    {
		[Column] public int Id { get; set; }
		[Column] public int AdId { get; set; }
		[Column] public int UserId { get; set; }
		[Column] public float? Price { get; set; }
		[Column] public string Message { get; set; }
		[Column] public DateTime MadeOn { get; set; }
	}
    
	[TableName("dbo.Person")]
	[PrimaryKey("Id")]
	[ExplicitColumns]
    public partial class Person : AppConnectionDB.Record<Person>  
    {
		[Column] public int Id { get; set; }
		[Column] public string Name { get; set; }
		[Column] public string Icon { get; set; }
		[Column] public string Phone { get; set; }
		[Column] public string Mail { get; set; }
		[Column] public string Location { get; set; }
	}
    
	[TableName("dbo.ReportedAd")]
	[PrimaryKey("Id")]
	[ExplicitColumns]
    public partial class ReportedAd : AppConnectionDB.Record<ReportedAd>  
    {
		[Column] public int Id { get; set; }
		[Column] public int AdId { get; set; }
		[Column] public int UserId { get; set; }
		[Column] public string Message { get; set; }
		[Column] public DateTime MadeOn { get; set; }
	}
    
	[TableName("dbo.Role")]
	[PrimaryKey("Id")]
	[ExplicitColumns]
    public partial class Role : AppConnectionDB.Record<Role>  
    {
		[Column] public int Id { get; set; }
		[Column] public string RoleId { get; set; }
	}
    
	[TableName("dbo.UserRole")]
	[ExplicitColumns]
    public partial class UserRole : AppConnectionDB.Record<UserRole>  
    {
		[Column] public int UserId { get; set; }
		[Column] public int RoleId { get; set; }
	}
    
	[TableName("dbo.AdInfoView")]
	[ExplicitColumns]
    public partial class AdInfoView : AppConnectionDB.Record<AdInfoView>  
    {
		[Column] public int Id { get; set; }
		[Column] public int UserId { get; set; }
		[Column] public int CategoryId { get; set; }
		[Column] public int Type { get; set; }
		[Column] public int Status { get; set; }
		[Column] public DateTime PostedOn { get; set; }
		[Column] public bool ContactFlag { get; set; }
		[Column] public string Title { get; set; }
		[Column] public string Description { get; set; }
		[Column] public float Price { get; set; }
		[Column] public string ImageUrls { get; set; }
		[Column] public string FieldValues { get; set; }
		[Column] public DateTime ExpiryDate { get; set; }
		[Column] public int? OfferCount { get; set; }
		[Column] public int? CommentCount { get; set; }
		[Column] public string RemovedReason { get; set; }
		[Column] public int? RemovedBy { get; set; }
		[Column] public DateTime? RemovedOn { get; set; }
		[Column] public string CategoryName { get; set; }
		[Column] public string CategoryIconUri { get; set; }
	}
    
	[TableName("dbo.AdView")]
	[ExplicitColumns]
    public partial class AdView : AppConnectionDB.Record<AdView>  
    {
		[Column] public int Id { get; set; }
		[Column] public int Type { get; set; }
		[Column] public int Status { get; set; }
		[Column] public DateTime PostedOn { get; set; }
		[Column] public string Title { get; set; }
		[Column] public string Description { get; set; }
		[Column] public float Price { get; set; }
		[Column] public string ImageUrls { get; set; }
		[Column] public DateTime ExpiryDate { get; set; }
		[Column] public int? OfferCount { get; set; }
		[Column] public int? CommentCount { get; set; }
		[Column] public string CategoryName { get; set; }
		[Column] public string CategoryIconUri { get; set; }
		[Column] public string UserIconUri { get; set; }
		[Column] public string UserName { get; set; }
		[Column] public string Location { get; set; }
	}
}
